




function getConeData(A, ΣB)
    n = length(ΣB.RAYS[1,:])-1
    maxpols = ΣB.MAXIMAL_POLYTOPES
    Ssq = MatrixSpace(QQ, n, n)
    E = Matrix{Int64}(I,n,n)
    Γ = fill(zero(Ssq),size(maxpols,1),n) # Inverses of the coefficient matrices for each cone σ and each standard basis vector e_i
    dets = fill(zero(fmpq),size(maxpols,1),n) # For each cone σ and each standard basis vector e_i, the determinant of the coefficient matrix of our linear system
    RR = []  # matrices with Z-bases for the lattices generated by all the cones
    Fσ = []  # matrices F such that σ = { F x <= 0 } for all cones σ
    for j = 1:size(maxpols,1)
        R = transpose(ΣB.RAYS[findall(ℓ->ℓ,maxpols[j,:])[1:end-1],2:end])
        S = MatrixSpace(QQ,size(R)...)
        R = S(convert(Array{Int64,2},R))
        if size(R,2) == ΣB.PROJECTIVE_DIM
            Rσ = R
        else
            SS, TT, U = snf_with_transform(R)
            Rσ = TT[:,1:ΣB.PROJECTIVE_DIM]
        end
        for i = 1:n
            mtx = Ssq(hcat(Array(Rσ),A',-E[:,i]))
            dmtx = det(mtx)
            if dmtx !=0
                Γ[j,i] = inv(mtx)
                dets[j,i] = abs(dmtx)
            end
        end
        fcts = collect(facets(positive_hull(Array(R'))))
        fctmtx = convert(Array{Int64,2},hcat([f.a for f ∈ fcts]...)')
        T = MatrixSpace(QQ,size(fctmtx)...)
        RR = push!(RR,Rσ)
        Fσ = push!(Fσ,T(fctmtx))
    end
    Γ, dets, RR, Fσ
end

function getVertex2(w, Γ, dets, RR, Fσ; warning = false)
    n = size(Γ,2)
    U = MatrixSpace(QQ,n,1)
    w = U(w)
    monomial = zeros(fmpq,n)
    flag = false
    for i = 1:n
        for j = 1:size(Γ,1)
            if dets[j,i] != 0
                x = Array(Γ[j,i]*w)
                if minimum(abs.(x)) == 0
                    if warning
                        println("non-generic for w = $w !")
                    end
                    flag = true
                end
                if x[end] > 0 && prod(Fσ[j]*(RR[j]*x[1:size(RR[j],2)]) .< 0) == 1
                    monomial[i] += dets[j,i]
                end
            end
        end
    end
    if sum(monomial.<0)>0
        println("Get negative exponents for weight w = $w.")
        println("monomial = $monomial.")
    end
    monomial, flag
end


function sampleRandom(Γ, dets, RR, Fσ, nsamples)
    n = size(Γ,2)
    monomials = []
    for i = 1:nsamples
        w = rand(-10000:10000,n)
        monomial, flag = getVertex2(w, Γ, dets, RR, Fσ)
        if !flag
            monomials = unique!(push!(monomials,monomial))
        end
    end
    monomials
end
